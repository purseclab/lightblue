#include "llvm/ADT/StringRef.h"
#include <list>

std::list<llvm::StringRef> a2dp_interface = {
    "a2dp_sink_create_sdp_record",
    "a2dp_sink_init",
    "a2dp_sink_create_stream_endpoint",
    "a2dp_sink_register_packet_handler",
    "a2dp_sink_register_media_handler",
    "a2dp_sink_establish_stream",
    "a2dp_sink_disconnect",
    "a2dp_source_create_sdp_record",
    "a2dp_source_init",
    "a2dp_source_create_stream_endpoint",
    "a2dp_source_register_packet_handler",
    "a2dp_source_establish_stream",
    "a2dp_source_reconfigure_stream_sampling_frequency",
    "a2dp_source_start_stream",
    "a2dp_source_pause_stream",
    "a2dp_source_disconnect",
    "a2dp_source_stream_endpoint_request_can_send_now",
    "a2dp_max_media_payload_size",
    "a2dp_source_stream_send_media_payload",
    "avrcp_controller_create_sdp_record",
    "avrcp_controller_init",
    "avrcp_controller_register_packet_handler",
    "avrcp_controller_connect",
    "avrcp_controller_disconnect",
    "avrcp_controller_set_max_num_fragments",
    "avrcp_controller_unit_info",
    "avrcp_controller_subunit_info",
    "avrcp_controller_get_supported_company_ids",
    "avrcp_controller_get_supported_events",
    "avrcp_controller_release_press_and_hold_cmd",
    "avrcp_controller_play",
    "avrcp_controller_press_and_hold_play",
    "avrcp_controller_stop",
    "avrcp_controller_press_and_hold_stop",
    "avrcp_controller_pause",
    "avrcp_controller_press_and_hold_pause",
    "avrcp_controller_fast_forward",
    "avrcp_controller_press_and_hold_fast_forward",
    "avrcp_controller_rewind",
    "avrcp_controller_press_and_hold_rewind",
    "avrcp_controller_forward",
    "avrcp_controller_press_and_hold_forward",
    "avrcp_controller_backward",
    "avrcp_controller_press_and_hold_backward",
    "avrcp_controller_volume_up",
    "avrcp_controller_press_and_hold_volume_up",
    "avrcp_controller_volume_down",
    "avrcp_controller_press_and_hold_volume_down",
    "avrcp_controller_mute",
    "avrcp_controller_press_and_hold_mute",
    "avrcp_controller_get_play_status",
    "avrcp_controller_enable_notification",
    "avrcp_controller_disable_notification",
    "avrcp_controller_get_now_playing_info",
    "avrcp_controller_set_absolute_volume",
    "avrcp_controller_skip",
    "avrcp_controller_query_shuffle_and_repeat_modes",
    "avrcp_controller_set_shuffle_mode",
    "avrcp_controller_set_repeat_mode",
    "avrcp_controller_play_item_for_scope",
    "avrcp_controller_add_item_from_scope_to_now_playing_list",
    "avrcp_controller_set_addressed_player",
    "avrcp_target_create_sdp_record",
    "avrcp_target_init",
    "avrcp_target_register_packet_handler",
    "avrcp_target_connect",
    "avrcp_target_disconnect",
    "avrcp_target_supported_companies",
    "avrcp_target_supported_events",
    "avrcp_target_play_status",
    "avrcp_target_set_now_playing_info",
    "avrcp_target_set_playback_status",
    "avrcp_target_set_unit_info",
    "avrcp_target_set_subunit_info",
    "avrcp_target_playing_content_changed",
    "avrcp_target_addressed_player_changed",
    "avrcp_target_battery_status_changed",
    "avrcp_target_volume_changed",
    "avrcp_target_track_changed",
    "avrcp_target_operation_rejected",
    "avrcp_target_operation_accepted",
    "avrcp_target_operation_not_implemented",
};

std::list<llvm::StringRef> hfp_interface = {
    "rfcomm_init",
    "hfp_ag_create_sdp_record",
    "hfp_ag_init",
    "hfp_ag_init_codecs",
    "hfp_ag_init_supported_features",
    "hfp_ag_init_ag_indicators",
    "hfp_ag_init_hf_indicators",
    "hfp_ag_init_call_hold_services",
    "hfp_ag_register_packet_handler",
    "hfp_ag_set_use_in_band_ring_tone",
    "hfp_ag_establish_service_level_connection",
    "hfp_ag_release_service_level_connection",
    "hfp_ag_establish_audio_connection",
    "hfp_ag_release_audio_connection",
    "hfp_ag_answer_incoming_call",
    "hfp_ag_join_held_call",
    "hfp_ag_terminate_call",
    "hfp_ag_hold_incoming_call",
    "hfp_ag_accept_held_incoming_call",
    "hfp_ag_reject_held_incoming_call",
    "hfp_ag_set_microphone_gain",
    "hfp_ag_set_speaker_gain",
    "hfp_ag_set_battery_level",
    "hfp_ag_clear_last_dialed_number",
    "hfp_ag_notify_incoming_call_waiting",
    "hfp_ag_activate_voice_recognition",
    "hfp_ag_send_phone_number_for_voice_tag",
    "hfp_ag_reject_phone_number_for_voice_tag",
    "hfp_ag_set_clip",
    "hfp_ag_incoming_call",
    "hfp_ag_outgoing_call_rejected",
    "hfp_ag_outgoing_call_accepted",
    "hfp_ag_outgoing_call_ringing",
    "hfp_ag_outgoing_call_established",
    "hfp_ag_call_dropped",
    "hfp_ag_set_registration_status",
    "hfp_ag_set_signal_strength",
    "hfp_ag_set_roaming_status",
    "hfp_ag_set_subcriber_number_information",
    "hfp_ag_send_dtmf_code_done",
    "hfp_ag_report_extended_audio_gateway_error_result_code",
    "hfp_hf_create_sdp_record",
    "hfp_hf_init",
    "hfp_hf_init_codecs",
    "hfp_hf_init_supported_features",
    "hfp_hf_init_hf_indicators",
    "hfp_hf_register_packet_handler",
    "hfp_hf_establish_service_level_connection",
    "hfp_hf_release_service_level_connection",
    "hfp_hf_enable_status_update_for_all_ag_indicators",
    "hfp_hf_disable_status_update_for_all_ag_indicators",
    "hfp_hf_set_status_update_for_individual_ag_indicators",
    "hfp_hf_query_operator_selection",
    "hfp_hf_enable_report_extended_audio_gateway_error_result_code",
    "hfp_hf_disable_report_extended_audio_gateway_error_result_code",
    "hfp_hf_establish_audio_connection",
    "hfp_hf_release_audio_connection",
    "hfp_hf_answer_incoming_call",
    "hfp_hf_reject_incoming_call",
    "hfp_hf_user_busy",
    "hfp_hf_end_active_and_accept_other",
    "hfp_hf_swap_calls",
    "hfp_hf_join_held_call",
    "hfp_hf_connect_calls",
    "hfp_hf_terminate_call",
    "hfp_hf_dial_number",
    "hfp_hf_dial_memory",
    "hfp_hf_redial_last_number",
    "hfp_hf_activate_call_waiting_notification",
    "hfp_hf_deactivate_call_waiting_notification",
    "hfp_hf_activate_calling_line_notification",
    "hfp_hf_deactivate_calling_line_notification",
    "hfp_hf_activate_echo_canceling_and_noise_reduction",
    "hfp_hf_deactivate_echo_canceling_and_noise_reduction",
    "hfp_hf_activate_voice_recognition_notification",
    "hfp_hf_deactivate_voice_recognition_notification",
    "hfp_hf_set_microphone_gain",
    "hfp_hf_set_speaker_gain",
    "hfp_hf_send_dtmf_code",
    "hfp_hf_request_phone_number_for_voice_tag",
    "hfp_hf_query_current_call_status",
    "hfp_hf_release_call_with_index",
    "hfp_hf_private_consultation_with_call",
    "hfp_hf_rrh_query_status",
    "hfp_hf_rrh_hold_call",
    "hfp_hf_rrh_accept_held_call",
    "hfp_hf_rrh_reject_held_call",
    "hfp_hf_query_subscriber_number",
    "hfp_hf_set_hf_indicator",
    "hfp_hf_in_band_ringtone_active",
};

std::list<llvm::StringRef> pan_interface = {
    "bnep_init",
    "pan_create_panu_sdp_record",
    "pan_create_gn_sdp_record",
    "pan_create_nap_sdp_record",
};

std::list<llvm::StringRef> hid_inpterface = {
    "hid_device_init",
    "hid_device_register_packet_handler",
    "hid_device_register_report_request_callback",
    "hid_device_register_set_report_callback",
    "hid_device_register_report_data_callback",
    "hid_device_connect",
    "hid_device_disconnect",
    "hid_device_request_can_send_now_event",
    "hid_device_send_interrupt_message",
    "hid_device_send_control_message",
    "hid_device_in_boot_protocol_mode",
};

std::list<llvm::StringRef> hsp_interface = {
    "rfcomm_init",
    "hsp_ag_init",
    "hsp_ag_create_sdp_record",
    "hsp_ag_register_packet_handler",
    "hsp_ag_connect",
    "hsp_ag_disconnect",
    "hsp_ag_establish_audio_connection",
    "hsp_ag_release_audio_connection",
    "hsp_ag_set_microphone_gain",
    "hsp_ag_set_speaker_gain",
    "hsp_ag_start_ringing",
    "hsp_ag_stop_ringing",
    "hsp_ag_enable_custom_commands",
    "hsp_ag_send_result",
    "hsp_hs_init",
    "hsp_hs_create_sdp_record",
    "hsp_hs_register_packet_handler",
    "hsp_hs_connect",
    "hsp_hs_disconnect",
    "hsp_hs_send_button_press",
    "hsp_hs_establish_audio_connection",
    "hsp_hs_release_audio_connection",
    "hsp_hs_set_microphone_gain",
    "hsp_hs_set_speaker_gain",
    "hsp_hs_enable_custom_indications",
    "hsp_hs_send_result",
};

std::list<llvm::StringRef> spp_interface = {
    "rfcomm_init",
    "spp_create_sdp_record",
    "spp_create_custom_sdp_record",
};

std::list<llvm::StringRef> goep_interface = {
    "goep_client_init",
    "goep_client_create_connection",
    "goep_client_disconnect",
    "goep_client_request_can_send_now",
    "goep_client_get_request_opcode",
    "goep_client_get_pbap_supported_features",
    "goep_client_set_connection_id",
    "goep_client_request_create_connect",
    "goep_client_request_create_disconnect",
    "goep_client_request_create_get",
    "goep_client_request_create_abort",
    "goep_client_request_create_set_path",
    "goep_client_request_create_put",
    "goep_client_header_add_srm_enable",
    "goep_client_header_add_byte",
    "goep_client_header_add_word",
    "goep_client_header_add_variable",
    "goep_client_header_add_name",
    "goep_client_header_add_target",
    "goep_client_header_add_type",
    "goep_client_header_add_count",
    "goep_client_header_add_application_parameters",
    "goep_client_header_add_challenge_response",
    "goep_client_body_add_static",
    "goep_client_execute",
};

std::list<llvm::StringRef> pbap_interface = {
    "rfcomm_init",
    "pbap_client_init",
    "pbap_connect",
    "pbap_authentication_password",
    "pbap_disconnect",
    "pbap_set_phonebook",
    "pbap_set_vcard_selector",
    "pbap_set_vcard_selector_operator",
    "pbap_get_phonebook_size",
    "pbap_pull_phonebook",
    "pbap_pull_vcard_listing",
    "pbap_pull_vcard_entry",
    "pbap_lookup_by_number",
    "pbap_abort",
    "pbap_set_flow_control_mode",
    "pbap_next_packet",
};

std::list<llvm::StringRef> gatt_interface = {
    "att_server_init",
    "att_server_register_packet_handler",
    "att_server_register_service_handler",
    "att_server_register_can_send_now_callback",
    "att_server_get_mtu",
    "att_server_request_to_send_notification",
    "att_server_request_to_send_indication",
    "att_server_notify",
    "att_server_indicate",
    "att_server_response_ready",
    "att_server_can_send_packet_now",
    "att_server_request_can_send_now_event",
    "gatt_client_init",
    "gatt_client_get_mtu",
    "gatt_client_mtu_enable_auto_negotiation",
    "gatt_client_send_mtu_negotiation",
    "gatt_client_is_ready",
    "gatt_client_discover_primary_services",
    "gatt_client_discover_primary_services_by_uuid16",
    "gatt_client_discover_primary_services_by_uuid128",
    "gatt_client_find_included_services_for_service",
    "gatt_client_discover_characteristics_for_service",
    "gatt_client_discover_characteristics_for_handle_range_by_uuid16",
    "gatt_client_discover_characteristics_for_handle_range_by_uuid128",
    "gatt_client_discover_characteristics_for_service_by_uuid16",
    "gatt_client_discover_characteristics_for_service_by_uuid128",
    "gatt_client_discover_characteristic_descriptors",
    "gatt_client_read_value_of_characteristic",
    "gatt_client_read_value_of_characteristic_using_value_handle",
    "gatt_client_read_value_of_characteristics_by_uuid16",
    "gatt_client_read_value_of_characteristics_by_uuid128",
    "gatt_client_read_long_value_of_characteristic",
    "gatt_client_read_long_value_of_characteristic_using_value_handle",
    "gatt_client_read_long_value_of_characteristic_using_value_handle_with_"
    "offset",
    "gatt_client_read_multiple_characteristic_values",
    "gatt_client_write_value_of_characteristic_without_response",
    "gatt_client_signed_write_without_response",
    "gatt_client_write_value_of_characteristic",
    "gatt_client_write_long_value_of_characteristic",
    "gatt_client_write_long_value_of_characteristic_with_offset",
    "gatt_client_reliable_write_long_value_of_characteristic",
    "gatt_client_read_characteristic_descriptor",
    "gatt_client_read_characteristic_descriptor_using_descriptor_handle",
    "gatt_client_read_long_characteristic_descriptor",
    "gatt_client_read_long_characteristic_descriptor_using_descriptor_handle",
    "gatt_client_read_long_characteristic_descriptor_using_descriptor_handle_"
    "with_offset",
    "gatt_client_write_characteristic_descriptor",
    "gatt_client_write_characteristic_descriptor_using_descriptor_handle",
    "gatt_client_write_long_characteristic_descriptor",
    "gatt_client_write_long_characteristic_descriptor_using_descriptor_handle",
    "gatt_client_write_long_characteristic_descriptor_using_descriptor_handle_"
    "with_offset",
    "gatt_client_write_client_characteristic_configuration",
    "gatt_client_listen_for_characteristic_value_updates",
    "gatt_client_stop_listening_for_characteristic_value_updates",
    "gatt_client_request_can_write_without_response_event",
    "gatt_client_prepare_write",
    "gatt_client_execute_write",
    "gatt_client_cancel_write",
    "sm_init",
    "sm_set_er",
    "sm_set_ir",
    "sm_register_oob_data_callback",
    "sm_add_event_handler",
    "sm_set_accepted_stk_generation_methods",
    "sm_set_encryption_key_size_range",
    "sm_set_authentication_requirements",
    "sm_set_io_capabilities",
    "sm_set_request_security",
    "sm_send_security_request",
    "sm_bonding_decline",
    "sm_just_works_confirm",
    "sm_numeric_comparison_confirm",
    "sm_passkey_input",
    "sm_keypress_notification",
    "sm_request_pairing",
    "sm_authorization_decline",
    "sm_authorization_grant",
    "sm_cmac_ready",
    "sm_cmac_signed_write_start",
    "sm_address_resolution_lookup",
    "sm_identity_resolving_state",
    "sm_le_device_index",
    "sm_use_fixed_passkey_in_display_role",
    "sm_allow_ltk_reconstruction_without_le_device_db_entry",
    "sm_generate_sc_oob_data",
    "sm_register_sc_oob_data_callback",
};

// Bluekitchen test case function for each profile
std::list<llvm::StringRef> a2dp_func = {
    "a2dp_sink_packet_handler",
    "avrcp_controller_packet_handler",
    "avrcp_target_packet_handler",
    "hci_packet_handler",
    "handle_l2cap_media_data_packet",
    "a2dp_and_avrcp_setup",
    "playback_handler",
    "handle_pcm_data",
    "media_processing_init",
    "media_processing_start",
    "media_processing_pause",
    "media_processing_close",
    "read_media_data_header",
    "read_sbc_header",
    "dump_sbc_configuration",
    "hci_packet_handler",
    "show_usage",
    "stdin_process",
};
